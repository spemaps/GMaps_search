"""my_file = open("maze1.txt", "r")
print my_file.readlines()
my_file.close()
"""

maze = 'sxwwxwwxf'

 #assume know size of maze

rows = 3
col = 3

graph = dict()

start = 0
end = "f"

for m in maze:
 	if m == 's':
 		start = maze.index('s')
 		maze= maze[:start] + "v"+ maze[start+1:]

def bfs(maze, start, end):
	queue = []
	# push the first path into the queue
	queue.append([start])
	while queue:
	    # get the first path from the queue
	    path = queue.pop(0)
	    #print "path", path
	    # get the last node from the path
	    node = path[-1]
	    print "node", node
	    print "maze node", maze[node]
	    #print "node", node
	    # path found
	    if maze[node] == end:
	        return path
	    queue =neighbors(queue, node, col, path)

"""
	    adjacent = [1, 2, 3]
		#adjacent = [node - rows, node + rows, node - 1, node + 1]
		for aa in adjacent:
			print "adjacent", aa
	    # enumerate all adjacent nodes, construct a new path and push it into the queue
	    #adjacent borders
	    for a in adjacent:
	    	if a < len(maze) and a >=0 and maze[a] =="x":
	    		maze[a] ==maze[:a] + "v"+ maze[a+1:]
		        new_path = list(path)
		        #print 'new_path', new_path
		        new_path.append(a)
		        queue.append(new_path)
		        #print 'new queue', queue"""


def neighbors(q, node, col, path):
	top = [node + col]
	print "top", top
	bottom = [node - col]
	print "bottom", bottom
	left = [node - 1]
	right = [node + 1]
	adjacent = [top, bottom, left, right]
	for aa in adjacent:
		print aa
		print maze[aa], "maze index lo"
	k = 0;
	print len(maze), "lenght"
	print path, "path"
	for a in adjacent: 
		if a < len(maze) and a >=0 and maze[a] =="x":
		        new_path = list(path)
		        print "new_path", new_path
		        new_path.append(a)
		        q.append(new_path)
		        maze[a] = maze[:a] + "v"+ maze[a+1:]
		        k+=1
	print "k", k
	print q, "q"
	return q

"""counter = rows
for k in range(0, rows):
	maze.insert(counter,"\n")
	counter += counter"""

route = bfs (maze, start, end)
print "route", route

print "maze", maze
